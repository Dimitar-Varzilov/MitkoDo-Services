// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TasksAPI.Data;

#nullable disable

namespace TasksAPI.Migrations
{
    [DbContext(typeof(TaskContext))]
    [Migration("20231002081852_Initial-Migration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TasksAPI.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ToDoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ToDoId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("TasksAPI.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NoteId"));

                    b.Property<Guid?>("SubTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NoteId");

                    b.HasIndex("SubTaskId");

                    b.ToTable("Notes");
                });

            modelBuilder.Entity("TasksAPI.Models.Picture", b =>
                {
                    b.Property<int>("PictureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PictureId"));

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SubTaskId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("PictureId");

                    b.HasIndex("SubTaskId");

                    b.ToTable("Picture");
                });

            modelBuilder.Entity("TasksAPI.Models.SubTask", b =>
                {
                    b.Property<Guid>("SubTaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<int>("NotesCountToBeCompleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1);

                    b.Property<int>("PicturesCountToBeCompleted")
                        .HasColumnType("int");

                    b.Property<int>("TaskId")
                        .HasColumnType("int");

                    b.Property<Guid>("TaskToDoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubTaskId");

                    b.HasIndex("TaskToDoId");

                    b.ToTable("SubTasks");
                });

            modelBuilder.Entity("TasksAPI.Models.ToDo", b =>
                {
                    b.Property<Guid>("ToDoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ToDoId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("TasksAPI.Models.Employee", b =>
                {
                    b.HasOne("TasksAPI.Models.ToDo", null)
                        .WithMany("EmployeeIds")
                        .HasForeignKey("ToDoId");
                });

            modelBuilder.Entity("TasksAPI.Models.Note", b =>
                {
                    b.HasOne("TasksAPI.Models.SubTask", null)
                        .WithMany("Notes")
                        .HasForeignKey("SubTaskId");
                });

            modelBuilder.Entity("TasksAPI.Models.Picture", b =>
                {
                    b.HasOne("TasksAPI.Models.SubTask", null)
                        .WithMany("Pictures")
                        .HasForeignKey("SubTaskId");
                });

            modelBuilder.Entity("TasksAPI.Models.SubTask", b =>
                {
                    b.HasOne("TasksAPI.Models.ToDo", "Task")
                        .WithMany("SubTasks")
                        .HasForeignKey("TaskToDoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Task");
                });

            modelBuilder.Entity("TasksAPI.Models.SubTask", b =>
                {
                    b.Navigation("Notes");

                    b.Navigation("Pictures");
                });

            modelBuilder.Entity("TasksAPI.Models.ToDo", b =>
                {
                    b.Navigation("EmployeeIds");

                    b.Navigation("SubTasks");
                });
#pragma warning restore 612, 618
        }
    }
}
